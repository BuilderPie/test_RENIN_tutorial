% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modeling.R
\name{run_aen_tfs_for_gene}
\alias{run_aen_tfs_for_gene}
\title{Run adaptive elastic net to identify TFs regulating an individual gene}
\usage{
run_aen_tfs_for_gene(
  input_tf_list,
  pseudocell_matrix,
  regulator_names,
  train_fraction = 0.8,
  set_seed = TRUE,
  lambda = "lambda.min",
  lambda2 = 0.5,
  gamma = 1,
  ci_cutoff = 1.96,
  pval_cutoff = NULL,
  set_nonsig_to_zero = TRUE,
  recalculate_l1 = FALSE,
  ...
)
}
\arguments{
\item{input_tf_list}{List containing gene name, putative regulatory TFs to consider, and bootstrap seeds}

\item{pseudocell_matrix}{Pseudocell expression matrix to use}

\item{regulator_names}{Optionally, list of TF names to model. TFs that are not within this list, if not NULL, are excluded}

\item{train_fraction}{Fraction of pseudocells used for training during cross-validation step}

\item{set_seed}{Boolean to determine whether to set seeds with inputted bootstrap seeds}

\item{lambda}{Can be lambda.min, or will be lambda.1se otherwise. During cross-validation step, determines whether to select the optimal value of lambda that gives the smallest cross validation error (lambda.min) or the largest lambda value such that the error is within 1 standard error of the minimum error (lambda.1se)}

\item{lambda2}{Parameter for quadratic L2 penalty for regularization}

\item{gamma}{Positive constant for calculating adaptive weights}

\item{ci_cutoff}{Confidence interval cutoff used to determine whether an estimated non-zero coefficient should be kept}

\item{pval_cutoff}{As an alternative, p value cutoff to use in order to calculate ci_cutoff. E.g. p value of 0.5 corresponds to 95\% CI}

\item{set_nonsig_to_zero}{Boolean to determine whether non-significant coefficient estimates should be set to zero}

\item{recalculate_l1}{Boolean to determine whether to recalculate adaptive L1 penalty weights with each bootstrapped sample. Set to FALSE by default to reduce runtime}
}
\value{
List containing gene name, coefficient of determination, trained model, and coefficient data frame
}
\description{
This function will identify putative transcription factors regulating a
target gene. It takes as input an input list, containing potential
regulatory TFs, recommended to be determined by motif information,
the pseudocell expression matrix generated by prepare_pseudocell_matrix,
and parameters for running the adaptive elastic net. The function
first performs a cross-validation step to calculate the optimal lambda as
well as adaptive L1 penalty weights. Then the adaptive elastic net
step is performed with bootstrapping to determine regulatory coefficients.
Information is returned for the modeled gene as a list, containing
the following information: the coefficient of determination calculated
during the cross validation step with the calculated lambda value,
the trained model object, and a data frame with regulatory weights
and standard errors for all statistically significant TFs. Regulatory
weights for non-significant TFs are set to 0 for future analysis if
desired.
}
